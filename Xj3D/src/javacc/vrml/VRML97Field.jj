/*****************************************************************************
 *                        Web3d Consortium Copyright (c) 2001
 *                               JavaCC Grammar Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 *****************************************************************************/

options {
    STATIC=false;
    OTHER_AMBIGUITY_CHECK=2;
    JAVA_UNICODE_ESCAPE = true;
    OPTIMIZE_TOKEN_MANAGER=true;
    DEBUG_PARSER=false;
    DEBUG_TOKEN_MANAGER=false;
    DEBUG_LOOKAHEAD=false;

//    OPTIMIZE_TOKEN_MANAGER=false;
//    DEBUG_PARSER=true;
//    DEBUG_TOKEN_MANAGER=true;
}


PARSER_BEGIN(VRML97FieldParser)

/*****************************************************************************
 *                        Web3d Consortium Copyright (c) 2001
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 *****************************************************************************/

package org.web3d.parser.vrml97;

// Standard imports
import java.io.*;
import java.util.Hashtable;

// Application specific imports
import org.web3d.util.BooleanArray;
import org.web3d.util.DoubleArray;
import org.web3d.util.FloatArray;
import org.web3d.util.IntArray;
import org.web3d.util.StringArray;

/**
 * A parser class for raw field values to turn them into Java primitive types.
 * <p>
 * The parser assumes that we have a raw field value that does not contain any
 * surrounding values. For example, it expects MFField values to be stripped of
 * surrounding brackets before being passed to these methods.
 * <p>
 * There are two ways of using this class: parsing a know field type, and
 * parsing an unknown field type and getting the parser to return the
 * appropriate (closest guess) value to you.
 * <p>
 * This parser has been continually evolving since first written for the
 * VRML97 open source effort. The original contributor was Rick Goldberg of
 * Sun Microsystems. Since then it has been through numerous tweaks and
 * re-writes
 * <p>
 *
 * The assumption of this parser is that each time you call the method it will
 * have a non-zero length, non-empty string. There should be at least one
 * non-whitespace character in the string. If not, a parse exception will be
 * raised.
 * You can see what JavaCC thinks the grammar is
 * <a href="doc-files/VRML97Field.html">here</a>
 *
 * @author Justin Couch, Alan Hudson
 * @version Grammar $Revision: 1.21 $
 */
public class VRML97FieldParser {

    private IntArray intBuf = new IntArray();
    private FloatArray floatBuf = new FloatArray();
    private DoubleArray doubleBuf = new DoubleArray();
    private BooleanArray booleanBuf = new BooleanArray();
    private StringArray stringBuf = new StringArray();

    /**
     * Private convenience method to strip the string from the tokeniser of
     * surrounding quotes.
     *
     * @return The current token string minus leading and trailing quotes
     */
    private String stripString() {
        String ret_val = token.image;

        if(token.image.charAt(0) == '\"')
            ret_val = token.image.substring(1, token.image.length() - 1);

        if(ret_val.length() > 0 && Character.isWhitespace(ret_val.charAt(0)))
            ret_val = ret_val.trim();

	int esc_pos = ret_val.indexOf("\\\"");
	if(esc_pos != -1) {
            char[] ch = ret_val.toCharArray();
	    int size = ch.length;

	    for(int i = 0; i < size - 1; i++) {
		if(ch[i] == '\\' && ch[i + 1] == '\"') {
		    System.arraycopy(ch, i + 1, ch, i, size - i - 1);
		    i++;
		    size--;
		}
	    }

	    ret_val = new String(ch, 0, size);
	}

        return ret_val;
    }

    /**
     * Private convenience method to parse numbers as either hex or decimal
     * notation.
     * @return The current token as an integer.
     */
    private int parseInt() {
        if (token.image.length()>2 && token.image.startsWith("0x"))
            return (int) Long.parseLong(token.image.substring(2),16);
        else
            return Integer.parseInt(token.image);
    }

}

PARSER_END(VRML97FieldParser)

/**
 * This does not use the other methods to do the field parsing. Instead, it
 * goes on the raw values that are presented and returns objects to represent
 * that. We look for either single values or multiple values. For any of these
 * we return a representative object. The return value could be one of these:
 * <ul>
 * <li>Boolean
 * <li>Integer
 * <li>Float
 * <li>String
 * <li>boolean[]
 * <li>int[]
 * <li>float[]
 * <li>String[]
 * </ul>
 *
 * @param useInt A hint to use if this is a number field we are parsing to
 *    decide whether to parse number strings as an int or float for type
 *    checking. If expecting any other sort of field, has no effect.
 */
Object parseUnknownField(boolean useInt): {
    booleanBuf.clear();
    intBuf.clear();
    floatBuf.clear();
    doubleBuf.clear();
    stringBuf.clear();

    Object ret_val = null;
} {
    try {
        (
            LOOKAHEAD(2)
            <TRUE> {
                ret_val = Boolean.TRUE;
            }
|
            LOOKAHEAD(2)
            <FALSE> {
                ret_val = Boolean.FALSE;
            }
|
            LOOKAHEAD(2)
            <NUMBER_LITERAL> {
                if(useInt)
                    ret_val = new Integer(token.image);
                else
                    ret_val = new Float(token.image);
            }
|
            LOOKAHEAD(2)
            <STRING_LITERAL> {
                ret_val = stripString();
            }
|
            (<LBRACKET>)?
            (
                (
                    <TRUE> {
                        booleanBuf.add(true);
                    }
                    | <FALSE> {
                        booleanBuf.add(false);
                    }
                )+ {
                    ret_val = booleanBuf.toArray();
                }
|
                (
                    <NUMBER_LITERAL> {
                        if(useInt)
                            intBuf.add(parseInt());
                        else
                            floatBuf.add(Float.parseFloat(token.image));
                    }
                )+ {
                    if(useInt)
                        ret_val = intBuf.toArray();
                    else
                        ret_val = floatBuf.toArray();
                }
|
                (
                    <STRING_LITERAL> {
                        stringBuf.add(stripString());
                    }
                )+ {
                    ret_val = stringBuf.toArray();
                }
            )
            (<RBRACKET>)?
            (<EOF>)?
        ) {
            return ret_val;
        }
    } catch(NumberFormatException nfe) {
        throw new ParseException("Unknown badly formatted value somewhere: " +
                                 token.image);
    }
}

/**
 * Parse an SFInt value. If there is more than one int value in the string it
 * will be ignored.
 */
int SFInt32(): {
} {
    <NUMBER_LITERAL> {
        try {
            return parseInt();
        } catch(NumberFormatException nfe) {
            throw new ParseException("Int parse error: \"" + token.image + "\"");
        }
    }
    (<EOF>)?
}

/**
 * Parse an MFInt32 value.
 * <pre>
 * MFInt32 ::=
 *   "[" NUMBER_LITERAL* "]" |
 *   NUMBER_LITERAL*
 * </pre>
 */
int[] MFInt32(): {
    intBuf.clear();
} {
    try {
        (<LBRACKET>)?
        (
            <NUMBER_LITERAL> {
                intBuf.add(parseInt());
            }
        )*
        (<RBRACKET>)? {
            return intBuf.toArray();
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("Int parse error on int # " +
                                 intBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFFloat value. If there is more than one float value in the string
 * it will be ignored.
 */
float SFFloat(): {
} {
    <NUMBER_LITERAL> {
        try {
            return Float.parseFloat(token.image);
        } catch(NumberFormatException nfe) {
            throw new ParseException("Float parse error\"" + token.image + "\"");
        }
    }
    (<EOF>)?
}

/**
 * Parse an MFFloat value.
 * <pre>
 * MFInt32 ::=
 *   "[" NUMBER_LITERAL* "]" |
 *   NUMBER_LITERAL*
 * </pre>
 */
float[] MFFloat(): {
    floatBuf.clear();
} {
    try {
        (<LBRACKET>) ?
        (
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
        )*
        (<RBRACKET>)?
        (<EOF>)?  {
            return floatBuf.toArray();
        }
    } catch(NumberFormatException nfe) {
        throw new ParseException("Float parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFBool value. If there is more than one boolean value in the string
 * it will be ignored.
 */
boolean SFBool(): {
} {
    (
        <TRUE> { return true; }
|       <FALSE> { return false; }
    )
    (<EOF>)?
}

/**
 * Parse an MFBool value.
 * <pre>
 * MFBool ::=
 *   "[" ("TRUE" | "FALSE")* "]" |
 *   ("TRUE" | "FALSE")*
 * </pre>
 */
boolean[] MFBool(): {
    booleanBuf.clear();
} {
    (<LBRACKET>)?
    (
        <TRUE> { booleanBuf.add(true); }
|       <FALSE> { booleanBuf.add(false); }
    )*
    (<RBRACKET>)? {
        return booleanBuf.toArray();
    }
    (<EOF>)?
}


/**
 * Parse an SFString value. We really shouldn't need this, but it is here for
 * completeness.
 */
String SFString(): {
} {
    <STRING_LITERAL> { return stripString(); } (<EOF>)?
}

/**
 * Parse an MFString value.
 * <pre>
 * MFString ::=
 *   "[" ( STRING_LITERAL)* "]" |
 *   (STRING_LITERAL)*
 * </pre>
 */
String[] MFString(): {
    stringBuf.clear();
} {
    (<LBRACKET>)?
    (
         <STRING_LITERAL> { stringBuf.add(stripString()); }
    )*
    (<RBRACKET>)? {
        return stringBuf.toArray();
    }
    (<EOF>)?
}

/**
 * Parse an SFVec2f value. If there is more than one float value in the string
 * it will be ignored.
 */
float[] SFVec2f(): {
    float[] ret_val = new float[2];
} {
    try {
        <NUMBER_LITERAL> {
            ret_val[0] = Float.parseFloat(token.image);
        }
        <NUMBER_LITERAL> {
            ret_val[1] = Float.parseFloat(token.image);
            return ret_val;
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("SFVec3f parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an MFVec2f value.
 * <pre>
 * MFVec2f ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
float[] MFVec2f(): {
    floatBuf.clear();
} {
    try {
        (<LBRACKET>)?
        (
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
        )+
        (<RBRACKET>)? {
            return floatBuf.toArray();
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("Float parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFVec3f value. If there is more than one float value in the string
 * it will be ignored.
 */
float[] SFVec3f(): {
    float[] ret_val = new float[3];
} {
    try {
        <NUMBER_LITERAL> {
            ret_val[0] = Float.parseFloat(token.image);
        }
        <NUMBER_LITERAL> {
            ret_val[1] = Float.parseFloat(token.image);
        }
        <NUMBER_LITERAL> {
            ret_val[2] = Float.parseFloat(token.image);
            return ret_val;
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("SFVec3f parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an MFVec3f value.
 * <pre>
 * MFVec3f ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
float[] MFVec3f(): {
    floatBuf.clear();
} {
    try {
        (<LBRACKET>)?
        (
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
        )+
        (<RBRACKET>)? {
            return floatBuf.toArray();
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("Float parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFRotation value. If there is more than one float value in the string
 * it will be ignored.
 */
float[] SFRotation(): {
    float[] ret_val = new float[4];
} {
    try {
        <NUMBER_LITERAL> {
            ret_val[0] = Float.parseFloat(token.image);
        }
        <NUMBER_LITERAL> {
            ret_val[1] = Float.parseFloat(token.image);
        }
        <NUMBER_LITERAL> {
            ret_val[2] = Float.parseFloat(token.image);
        }
        <NUMBER_LITERAL> {
            ret_val[3] = Float.parseFloat(token.image);
            return ret_val;
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("SFVec3f parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an MFRotation value.
 * <pre>
 * MFRotation ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
float[] MFRotation(): {
    floatBuf.clear();
} {
    try {
        (<LBRACKET>)?
        (
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
            <NUMBER_LITERAL> {
                floatBuf.add(Float.parseFloat(token.image));
            }
        )+
        (<RBRACKET>)? {
            return floatBuf.toArray();
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("Float parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFTime value. If there is more than one float value in the string
 * it will be ignored.
 */
double SFTime(): {
} {
    <NUMBER_LITERAL> {
        try {
            return Double.parseDouble(token.image);
        } catch(NumberFormatException nfe) {
            throw new ParseException("Double parse error\"" + token.image + "\"");
        }
    }
    (<EOF>)?
}

/**
 * Parse an MFTime value. In VRML97 MFTime are not legal field types. However,
 * we provide it here for completeness and that it might be used by VRML 3.0.
 * <pre>
 * MFTime ::=
 *   "[" NUMBER_LITERAL* "]" |
 *   NUMBER_LITERAL*
 * </pre>
 */
double[] MFTime(): {
    doubleBuf.clear();
} {
    try {
        (<LBRACKET>)?
        (<NUMBER_LITERAL>)* {
                doubleBuf.add(Double.parseDouble(token.image));
        }
        (<RBRACKET>)? {
            return doubleBuf.toArray();
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("Double parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFColor value. If there is more than one float value in the string
 * it will be ignored.
 */
float[] SFColor(): {
    float[] ret_val = new float[3];
    float col;
} {
    try {
        <NUMBER_LITERAL> {
            col = Float.parseFloat(token.image);
            if((col > 1) || (col < 0))
                throw new ParseException("Color value out of range.  Value: " + col);

            ret_val[0] = col;
        }
        <NUMBER_LITERAL> {
            col = Float.parseFloat(token.image);
            if((col > 1) || (col < 0))
                throw new ParseException("Color value out of range.  Value: " + col);

            ret_val[1] = col;
        }
        <NUMBER_LITERAL> {
            col = Float.parseFloat(token.image);
            if((col > 1) || (col < 0))
                throw new ParseException("Color value out of range.  Value: " + col);

            ret_val[2] = col;
        }
        (<EOF>)? {
            return ret_val;
        }
    } catch(NumberFormatException nfe) {
        throw new ParseException("SFColor parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an MFColor value. The color differs from the float value by being
 * clamped between 0 and 1.
 * <pre>
 * MFColor ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
float[] MFColor(): {
    floatBuf.clear();
    float col;
} {
    try {
        (<LBRACKET>)?
        (
            <NUMBER_LITERAL> {
                col = Float.parseFloat(token.image);
                if((col > 1) || (col < 0))
                    throw new ParseException("Color value out of range");
                floatBuf.add(col);
            }
            <NUMBER_LITERAL> {
                col = Float.parseFloat(token.image);
                if((col > 1) || (col < 0))
                    throw new ParseException("Color value out of range");
                floatBuf.add(col);
            }
            <NUMBER_LITERAL> {
                col = Float.parseFloat(token.image);
                if((col > 1) || (col < 0))
                    throw new ParseException("Color value out of range");
                floatBuf.add(col);
            }
        )+
        (<RBRACKET>)? {
            return floatBuf.toArray();
        }
        (<EOF>)?
    } catch(NumberFormatException nfe) {
        throw new ParseException("Float parse error # " +
                                 floatBuf.size() + " val: " + nfe.getMessage());
    }
}

/**
 * Parse an SFImage value.
 * <pre>
 * SFImage ::=
 *   NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL (NUMBER_LITERAL)*
 * </pre>
 */
int[] SFImage(): {
    intBuf.clear();
} {
    try {
        <NUMBER_LITERAL> {
            intBuf.add(parseInt());
        }
        <NUMBER_LITERAL> {
            intBuf.add(parseInt());
        }
        <NUMBER_LITERAL> {
            intBuf.add(parseInt());
        }
        (<NUMBER_LITERAL> {
            intBuf.add(parseInt());
        }
        )*
        (<EOF>)? {
            return intBuf.toArray();
        }
    } catch(NumberFormatException nfe) {
        throw new ParseException("Int parse error on int # " +
                                 intBuf.size() + " val: " + nfe.getMessage());
    }
}


//---------------------------------------------------------------------------
//  TOKENS declaration
//---------------------------------------------------------------------------

TOKEN :
{
      // This is will match things which are not legal numbers, but it is faster
      // to let the string->number conversion detect the bad cases
      < NUMBER_LITERAL:
        ("-")? (".")? ["0"-"9"] (["0"-"9","a"-"f","A"-"F", "x", ".","+","-"])* >
|
    /* String literal kept for possible use in Protos */
    < STRING_LITERAL: // This is the Java def, may be more than X3D needs
      "\""
      (   (~["\"","\\"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
    >
}

TOKEN :
{
   < LBRACKET : "[" >
|  < RBRACKET : "]" >
}

TOKEN : // BOOLS
{
  < TRUE: "TRUE" >
| < FALSE: "FALSE" >
}

<*> SKIP : // White space
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
|   ","   // comma is treated as whitespace for fields
}

<*> SPECIAL_TOKEN : // Comments. Always single line
{
    < COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
}
