/* Generated By:JavaCC: Do not edit this line. VRML97FieldParser.java */
/*****************************************************************************
 *                        Web3d Consortium Copyright (c) 2001
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 *****************************************************************************/

package org.web3d.parser.vrml97;

// Standard imports
import java.io.*;
import java.util.Hashtable;

// Application specific imports
import org.web3d.util.BooleanArray;
import org.web3d.util.DoubleArray;
import org.web3d.util.FloatArray;
import org.web3d.util.IntArray;
import org.web3d.util.StringArray;

/**
 * A parser class for raw field values to turn them into Java primitive types.
 * <p>
 * The parser assumes that we have a raw field value that does not contain any
 * surrounding values. For example, it expects MFField values to be stripped of
 * surrounding brackets before being passed to these methods.
 * <p>
 * There are two ways of using this class: parsing a know field type, and
 * parsing an unknown field type and getting the parser to return the
 * appropriate (closest guess) value to you.
 * <p>
 * This parser has been continually evolving since first written for the
 * VRML97 open source effort. The original contributor was Rick Goldberg of
 * Sun Microsystems. Since then it has been through numerous tweaks and
 * re-writes
 * <p>
 *
 * The assumption of this parser is that each time you call the method it will
 * have a non-zero length, non-empty string. There should be at least one
 * non-whitespace character in the string. If not, a parse exception will be
 * raised.
 * You can see what JavaCC thinks the grammar is
 * <a href="doc-files/VRML97Field.html">here</a>
 *
 * @author Justin Couch, Alan Hudson
 * @version Grammar $Revision: 1.20 $
 */
public class VRML97FieldParser implements VRML97FieldParserConstants {

    private IntArray intBuf = new IntArray();
    private FloatArray floatBuf = new FloatArray();
    private DoubleArray doubleBuf = new DoubleArray();
    private BooleanArray booleanBuf = new BooleanArray();
    private StringArray stringBuf = new StringArray();

    /**
     * Private convenience method to strip the string from the tokeniser of
     * surrounding quotes.
     *
     * @return The current token string minus leading and trailing quotes
     */
    private String stripString() {
        String ret_val = token.image;

        if(token.image.charAt(0) == '\"')
            ret_val = token.image.substring(1, token.image.length() - 1);

        if(ret_val.length() > 0 && Character.isWhitespace(ret_val.charAt(0)))
            ret_val = ret_val.trim();

        int esc_pos = ret_val.indexOf("\\\"");
        if(esc_pos != -1) {
            char[] ch = ret_val.toCharArray();
            int size = ch.length;

            for(int i = 0; i < size - 1; i++) {
                if(ch[i] == '\\' && ch[i + 1] == '\"') {
                    System.arraycopy(ch, i + 1, ch, i, size - i - 1);
                    i++;
                    size--;
                }
            }

            ret_val = new String(ch, 0, size);
        }

        return ret_val;
    }

    /**
     * Private convenience method to parse numbers as either hex or decimal
     * notation.
     * @return The current token as an integer.
     */
    private int parseInt() {
        if (token.image.length()>2 && token.image.startsWith("0x"))
            return (int) Long.parseLong(token.image.substring(2),16);
        else
            return Integer.parseInt(token.image);
    }

/**
 * This does not use the other methods to do the field parsing. Instead, it
 * goes on the raw values that are presented and returns objects to represent
 * that. We look for either single values or multiple values. For any of these
 * we return a representative object. The return value could be one of these:
 * <ul>
 * <li>Boolean
 * <li>Integer
 * <li>Float
 * <li>String
 * <li>boolean[]
 * <li>int[]
 * <li>float[]
 * <li>String[]
 * </ul>
 *
 * @param useInt A hint to use if this is a number field we are parsing to
 *    decide whether to parse number strings as an int or float for type
 *    checking. If expecting any other sort of field, has no effect.
 */
  final public Object parseUnknownField(boolean useInt) throws ParseException {
    booleanBuf.clear();
    intBuf.clear();
    floatBuf.clear();
    doubleBuf.clear();
    stringBuf.clear();

    Object ret_val = null;
    try {
      if (jj_2_1(2)) {
        jj_consume_token(TRUE);
                ret_val = Boolean.TRUE;
      } else if (jj_2_2(2)) {
        jj_consume_token(FALSE);
                ret_val = Boolean.FALSE;
      } else if (jj_2_3(2)) {
        jj_consume_token(NUMBER_LITERAL);
                if(useInt)
                    ret_val = new Integer(token.image);
                else
                    ret_val = new Float(token.image);
      } else if (jj_2_4(2)) {
        jj_consume_token(STRING_LITERAL);
                ret_val = stripString();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
        case STRING_LITERAL:
        case LBRACKET:
        case TRUE:
        case FALSE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LBRACKET:
            jj_consume_token(LBRACKET);
            break;
          default:
            jj_la1[0] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRUE:
          case FALSE:
            label_1:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case TRUE:
                jj_consume_token(TRUE);
                        booleanBuf.add(true);
                break;
              case FALSE:
                jj_consume_token(FALSE);
                        booleanBuf.add(false);
                break;
              default:
                jj_la1[1] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case TRUE:
              case FALSE:
                ;
                break;
              default:
                jj_la1[2] = jj_gen;
                break label_1;
              }
            }
                    ret_val = booleanBuf.toArray();
            break;
          case NUMBER_LITERAL:
            label_2:
            while (true) {
              jj_consume_token(NUMBER_LITERAL);
                        if(useInt)
                            intBuf.add(parseInt());
                        else
                            floatBuf.add(Float.parseFloat(token.image));
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case NUMBER_LITERAL:
                ;
                break;
              default:
                jj_la1[3] = jj_gen;
                break label_2;
              }
            }
                    if(useInt)
                        ret_val = intBuf.toArray();
                    else
                        ret_val = floatBuf.toArray();
            break;
          case STRING_LITERAL:
            label_3:
            while (true) {
              jj_consume_token(STRING_LITERAL);
                        stringBuf.add(stripString());
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case STRING_LITERAL:
                ;
                break;
              default:
                jj_la1[4] = jj_gen;
                break label_3;
              }
            }
                    ret_val = stringBuf.toArray();
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RBRACKET:
            jj_consume_token(RBRACKET);
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 0:
            jj_consume_token(0);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
            {if (true) return ret_val;}
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Unknown badly formatted value somewhere: " +
                                 token.image);}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFInt value. If there is more than one int value in the string it
 * will be ignored.
 */
  final public int SFInt32() throws ParseException {
    jj_consume_token(NUMBER_LITERAL);
        try {
            {if (true) return parseInt();}
        } catch(NumberFormatException nfe) {
            {if (true) throw new ParseException("Int parse error: \"" + token.image + "\"");}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFInt32 value.
 * <pre>
 * MFInt32 ::=
 *   "[" NUMBER_LITERAL* "]" |
 *   NUMBER_LITERAL*
 * </pre>
 */
  final public int[] MFInt32() throws ParseException {
    intBuf.clear();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_4;
        }
        jj_consume_token(NUMBER_LITERAL);
                intBuf.add(parseInt());
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
            {if (true) return intBuf.toArray();}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Int parse error on int # " +
                                 intBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFFloat value. If there is more than one float value in the string
 * it will be ignored.
 */
  final public float SFFloat() throws ParseException {
    jj_consume_token(NUMBER_LITERAL);
        try {
            {if (true) return Float.parseFloat(token.image);}
        } catch(NumberFormatException nfe) {
            {if (true) throw new ParseException("Float parse error\"" + token.image + "\"");}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFFloat value.
 * <pre>
 * MFInt32 ::=
 *   "[" NUMBER_LITERAL* "]" |
 *   NUMBER_LITERAL*
 * </pre>
 */
  final public float[] MFFloat() throws ParseException {
    floatBuf.clear();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
            {if (true) return floatBuf.toArray();}
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Float parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFBool value. If there is more than one boolean value in the string
 * it will be ignored.
 */
  final public boolean SFBool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                 {if (true) return true;}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                  {if (true) return false;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFBool value.
 * <pre>
 * MFBool ::=
 *   "[" ("TRUE" | "FALSE")* "]" |
 *   ("TRUE" | "FALSE")*
 * </pre>
 */
  final public boolean[] MFBool() throws ParseException {
    booleanBuf.clear();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
        jj_consume_token(TRUE);
                 booleanBuf.add(true);
        break;
      case FALSE:
        jj_consume_token(FALSE);
                  booleanBuf.add(false);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACKET:
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
        {if (true) return booleanBuf.toArray();}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFString value. We really shouldn't need this, but it is here for
 * completeness.
 */
  final public String SFString() throws ParseException {
    jj_consume_token(STRING_LITERAL);
                       {if (true) return stripString();}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFString value.
 * <pre>
 * MFString ::=
 *   "[" ( STRING_LITERAL)* "]" |
 *   (STRING_LITERAL)*
 * </pre>
 */
  final public String[] MFString() throws ParseException {
    stringBuf.clear();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_7;
      }
      jj_consume_token(STRING_LITERAL);
                            stringBuf.add(stripString());
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RBRACKET:
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
        {if (true) return stringBuf.toArray();}
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFVec2f value. If there is more than one float value in the string
 * it will be ignored.
 */
  final public float[] SFVec2f() throws ParseException {
    float[] ret_val = new float[2];
    try {
      jj_consume_token(NUMBER_LITERAL);
            ret_val[0] = Float.parseFloat(token.image);
      jj_consume_token(NUMBER_LITERAL);
            ret_val[1] = Float.parseFloat(token.image);
            {if (true) return ret_val;}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("SFVec3f parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFVec2f value.
 * <pre>
 * MFVec2f ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
  final public float[] MFVec2f() throws ParseException {
    floatBuf.clear();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_8;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
            {if (true) return floatBuf.toArray();}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Float parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFVec3f value. If there is more than one float value in the string
 * it will be ignored.
 */
  final public float[] SFVec3f() throws ParseException {
    float[] ret_val = new float[3];
    try {
      jj_consume_token(NUMBER_LITERAL);
            ret_val[0] = Float.parseFloat(token.image);
      jj_consume_token(NUMBER_LITERAL);
            ret_val[1] = Float.parseFloat(token.image);
      jj_consume_token(NUMBER_LITERAL);
            ret_val[2] = Float.parseFloat(token.image);
            {if (true) return ret_val;}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("SFVec3f parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFVec3f value.
 * <pre>
 * MFVec3f ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
  final public float[] MFVec3f() throws ParseException {
    floatBuf.clear();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[37] = jj_gen;
        ;
      }
      label_9:
      while (true) {
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_9;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
            {if (true) return floatBuf.toArray();}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Float parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFRotation value. If there is more than one float value in the string
 * it will be ignored.
 */
  final public float[] SFRotation() throws ParseException {
    float[] ret_val = new float[4];
    try {
      jj_consume_token(NUMBER_LITERAL);
            ret_val[0] = Float.parseFloat(token.image);
      jj_consume_token(NUMBER_LITERAL);
            ret_val[1] = Float.parseFloat(token.image);
      jj_consume_token(NUMBER_LITERAL);
            ret_val[2] = Float.parseFloat(token.image);
      jj_consume_token(NUMBER_LITERAL);
            ret_val[3] = Float.parseFloat(token.image);
            {if (true) return ret_val;}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("SFVec3f parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFRotation value.
 * <pre>
 * MFRotation ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
  final public float[] MFRotation() throws ParseException {
    floatBuf.clear();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      label_10:
      while (true) {
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        jj_consume_token(NUMBER_LITERAL);
                floatBuf.add(Float.parseFloat(token.image));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_10;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
            {if (true) return floatBuf.toArray();}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[45] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Float parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFTime value. If there is more than one float value in the string
 * it will be ignored.
 */
  final public double SFTime() throws ParseException {
    jj_consume_token(NUMBER_LITERAL);
        try {
            {if (true) return Double.parseDouble(token.image);}
        } catch(NumberFormatException nfe) {
            {if (true) throw new ParseException("Double parse error\"" + token.image + "\"");}
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFTime value. In VRML97 MFTime are not legal field types. However,
 * we provide it here for completeness and that it might be used by VRML 3.0.
 * <pre>
 * MFTime ::=
 *   "[" NUMBER_LITERAL* "]" |
 *   NUMBER_LITERAL*
 * </pre>
 */
  final public double[] MFTime() throws ParseException {
    doubleBuf.clear();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[48] = jj_gen;
          break label_11;
        }
        jj_consume_token(NUMBER_LITERAL);
      }
                doubleBuf.add(Double.parseDouble(token.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
            {if (true) return doubleBuf.toArray();}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[50] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Double parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFColor value. If there is more than one float value in the string
 * it will be ignored.
 */
  final public float[] SFColor() throws ParseException {
    float[] ret_val = new float[3];
    float col;
    try {
      jj_consume_token(NUMBER_LITERAL);
            col = Float.parseFloat(token.image);
            if((col > 1) || (col < 0))
                {if (true) throw new ParseException("Color value out of range.  Value: " + col);}

            ret_val[0] = col;
      jj_consume_token(NUMBER_LITERAL);
            col = Float.parseFloat(token.image);
            if((col > 1) || (col < 0))
                {if (true) throw new ParseException("Color value out of range.  Value: " + col);}

            ret_val[1] = col;
      jj_consume_token(NUMBER_LITERAL);
            col = Float.parseFloat(token.image);
            if((col > 1) || (col < 0))
                {if (true) throw new ParseException("Color value out of range.  Value: " + col);}

            ret_val[2] = col;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
            {if (true) return ret_val;}
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("SFColor parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an MFColor value. The color differs from the float value by being
 * clamped between 0 and 1.
 * <pre>
 * MFColor ::=
 *   "[" (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)* "]" |
 *   (NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL)*
 * </pre>
 */
  final public float[] MFColor() throws ParseException {
    floatBuf.clear();
    float col;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACKET:
        jj_consume_token(LBRACKET);
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      label_12:
      while (true) {
        jj_consume_token(NUMBER_LITERAL);
                col = Float.parseFloat(token.image);
                if((col > 1) || (col < 0))
                    {if (true) throw new ParseException("Color value out of range");}
                floatBuf.add(col);
        jj_consume_token(NUMBER_LITERAL);
                col = Float.parseFloat(token.image);
                if((col > 1) || (col < 0))
                    {if (true) throw new ParseException("Color value out of range");}
                floatBuf.add(col);
        jj_consume_token(NUMBER_LITERAL);
                col = Float.parseFloat(token.image);
                if((col > 1) || (col < 0))
                    {if (true) throw new ParseException("Color value out of range");}
                floatBuf.add(col);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[53] = jj_gen;
          break label_12;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACKET:
        jj_consume_token(RBRACKET);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
            {if (true) return floatBuf.toArray();}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Float parse error # " +
                                 floatBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Parse an SFImage value.
 * <pre>
 * SFImage ::=
 *   NUMBER_LITERAL NUMBER_LITERAL NUMBER_LITERAL (NUMBER_LITERAL)*
 * </pre>
 */
  final public int[] SFImage() throws ParseException {
    intBuf.clear();
    try {
      jj_consume_token(NUMBER_LITERAL);
            intBuf.add(parseInt());
      jj_consume_token(NUMBER_LITERAL);
            intBuf.add(parseInt());
      jj_consume_token(NUMBER_LITERAL);
            intBuf.add(parseInt());
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER_LITERAL:
          ;
          break;
        default:
          jj_la1[56] = jj_gen;
          break label_13;
        }
        jj_consume_token(NUMBER_LITERAL);
            intBuf.add(parseInt());
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
            {if (true) return intBuf.toArray();}
    } catch (NumberFormatException nfe) {
        {if (true) throw new ParseException("Int parse error on int # " +
                                 intBuf.size());}
    }
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(NUMBER_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  public VRML97FieldParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x8,0x60,0x60,0x2,0x4,0x66,0x10,0x1,0x6e,0x1,0x8,0x2,0x10,0x1,0x1,0x8,0x2,0x10,0x1,0x60,0x1,0x8,0x60,0x60,0x10,0x1,0x1,0x8,0x4,0x10,0x1,0x1,0x8,0x2,0x10,0x1,0x1,0x8,0x2,0x10,0x1,0x1,0x8,0x2,0x10,0x1,0x1,0x8,0x2,0x10,0x1,0x1,0x8,0x2,0x10,0x1,0x2,0x1,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public VRML97FieldParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public VRML97FieldParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new VRML97FieldParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public VRML97FieldParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new VRML97FieldParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public VRML97FieldParser(VRML97FieldParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(VRML97FieldParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[14];
    for (int i = 0; i < 14; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
