/*****************************************************************************
 *                     Yumetech, Inc Copyright (c) 2004 - 2006
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 ****************************************************************************/

package org.j3d.aviatrix3d;

// External imports
import java.util.HashMap;

import javax.media.opengl.GL;

// Local imports
import org.j3d.aviatrix3d.picking.NotPickableException;

/**
 * An OpenGL Indexed IndexedTriangleArray.
 * <p>
 *
 * To do the drawing, this class uses the glDrawElements() function.
 *
 * <h3>Setting geometry</h3>
 *
 * <p>Part of the optimisation we make is to only copy into the underlying
 * structures the exact number of coordinates, normals etc that are needed.
 * To know this number, we need to know how many coordinates exist before
 * attempting to set anything else. When constructing, or updating, geometry,
 * you should always make sure that you first set the vertex list, then the
 * sizing information for the strip or fan counts, and then set normals as
 * needed. </p>
 *
 * @author Justin Couch
 * @version $Revision: 1.21 $
 */
public class IndexedTriangleArray extends IndexedVertexGeometry
{
    /**
     * Constructs a IndexedTriangleArray with default values.
     */
    public IndexedTriangleArray()
    {
        initPolygonDetails(3);
    }

    /**
     * Constructs an instance.
     *
     * @param useVbo Should we use vertex buffer objects
     * @param vboHint Hints for how to setup VBO.  Valid values are VBO_HINT_*
     */
    public IndexedTriangleArray(boolean useVbo, int vboHint)
    {
        super(useVbo, vboHint);

        initPolygonDetails(3);
    }

    //----------------------------------------------------------
    // Methods defined by GeometryRenderable
    //----------------------------------------------------------

    /**
     * Issue ogl commands needed for this renderable object.
     *
     * @param gl The gl context to draw with
     */
    public void render(GL gl)
    {
        // No coordinates, do nothing.
        if(((vertexFormat & COORDINATE_MASK) == 0) ||
           (numCoords == 0) || (numIndices == 0))
            return;

        setVertexState(gl);

        if (vboAvailable && useVbo)
        {
            Integer vbo_id = (Integer)vboElementIdMap.get(gl);

            gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, vbo_id.intValue());

            gl.glDrawElements(GL.GL_TRIANGLES,
                              numIndices,
                              GL.GL_UNSIGNED_INT,
                              0);

            gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER, 0);
        }
        else
        {
            gl.glDrawElements(GL.GL_TRIANGLES,
                              numIndices,
                              GL.GL_UNSIGNED_INT,
                              indexBuffer);
        }


        clearVertexState(gl);
    }


    //---------------------------------------------------------------
    // Methods defined by DeletableRenderable
    //---------------------------------------------------------------

    /**
     * Cleanup the object now for the given GL context.
     *
     * @param gl The gl context to draw with
     */
    public void cleanup(GL gl)
    {
        super.cleanup(gl);

        Integer vbo_id = (Integer)vboElementIdMap.get(gl);
        if(vbo_id != null)
        {
            int[] vbo_id_tmp = { vbo_id.intValue() };
            gl.glDeleteBuffers(1, vbo_id_tmp, 0);
            vboElementIdMap.remove(gl);
        }
    }

    //----------------------------------------------------------
    // Methods defined by Geometry
    //----------------------------------------------------------

    /**
     * Check for all intersections against this geometry using a line segment and
     * return the exact distance away of the closest picking point.
     *
     * @param start The start point of the segment
     * @param end The end point of the segment
     * @param findAny True if it only has to find a single intersection and can
     *   exit as soon as it finds the first intersection. False if it must find
     *   the closest polygon
     * @param dataOut An array to put the data in for the intersection. Exact
     *   format is described by the flags
     * @param dataOutFlags A set of derived-class specific flags describing what
     *   data should be included in the output array
     * @return True if an intersection was found according to the input request
     * @throws NotPickableException This object has been marked as non pickable,
     *   but you decided to try to call the method anyway
     */
    public boolean pickLineSegment(float[] start,
                                   float[] end,
                                   boolean findAny,
                                   float[] dataOut,
                                   int dataOutFlags)
        throws NotPickableException
    {
        // Call the super version to do our basic checking for us. Ignore the
        // return value as we're about to go calculate that ourselves.
        super.pickLineSegment(start, end, findAny, dataOut, dataOutFlags);

        float shortest_length = Float.POSITIVE_INFINITY;
        float this_length;
        boolean found = false;
        float out_x = 0;
        float out_y = 0;
        float out_z = 0;

        // copy the end var to a local for the time being as we're going to
        // reuse end as a direction vector.
        float end_x = end[0];
        float end_y = end[1];
        float end_z = end[2];

        float x = end[0] - start[0];
        float y = end[1] - start[1];
        float z = end[2] - start[2];

        float vec_len = (float)Math.sqrt(x * x + y * y + z * z);
        end[0] = x;
        end[1] = y;
        end[2] = z;

        int num_tris = numIndices / 3;
        int coord_offset = 0;

        for(int i = 0; i < num_tris; i++)
        {
            wkPolygon[0] = coordinates[indices[coord_offset] * 3];
            wkPolygon[1] = coordinates[indices[coord_offset] * 3 + 1];
            wkPolygon[2] = coordinates[indices[coord_offset] * 3 + 2];

            wkPolygon[3] = coordinates[indices[coord_offset + 1] * 3];
            wkPolygon[4] = coordinates[indices[coord_offset + 1] * 3 + 1];
            wkPolygon[5] = coordinates[indices[coord_offset + 1] * 3 + 2];

            wkPolygon[6] = coordinates[indices[coord_offset + 2] * 3];
            wkPolygon[7] = coordinates[indices[coord_offset + 2] * 3 + 1];
            wkPolygon[8] = coordinates[indices[coord_offset + 2] * 3 + 2];

            coord_offset += 3;

            if(ray3DTriangleChecked(start, end, vec_len, dataOut))
            {
                found = true;

                if(findAny)
                    break;

                float l_x = start[0] - dataOut[0];
                float l_y = start[1] - dataOut[1];
                float l_z = start[2] - dataOut[2];

                this_length = l_x * l_x + l_y * l_y + l_z * l_z;

                if(this_length < shortest_length)
                {
                    shortest_length = this_length;
                    out_x = dataOut[0];
                    out_y = dataOut[1];
                    out_z = dataOut[2];
                }
            }
        }

        dataOut[0] = out_x;
        dataOut[1] = out_y;
        dataOut[2] = out_z;

        // Copy it back again.
        end[0] = end_x;
        end[1] = end_y;
        end[2] = end_z;

        return found;
    }

    /**
     * Check for all intersections against this geometry using a line ray and
     * return the exact distance away of the closest picking point. Default
     * implementation always returns false indicating that nothing was found.
     * Derived classes should override and provide a real implementation.
     *
     * @param origin The start point of the ray
     * @param direction The direction vector of the ray
     * @param findAny True if it only has to find a single intersection and can
     *   exit as soon as it finds the first intersection. False if it must find
     *   the closest polygon
     * @param dataOut An array to put the data in for the intersection. Exact
     *   format is described by the flags
     * @param dataOutFlags A set of derived-class specific flags describing what
     *   data should be included in the output array
     * @return True if an intersection was found according to the input request
     * @throws NotPickableException This object has been marked as non pickable,
     *   but you decided to try to call the method anyway
     */
    public boolean pickLineRay(float[] origin,
                               float[] direction,
                               boolean findAny,
                               float[] dataOut,
                               int dataOutFlags)
        throws NotPickableException
    {
        // Call the super version to do our basic checking for us. Ignore the
        // return value as we're about to go calculate that ourselves.
        super.pickLineRay(origin, direction, findAny, dataOut, dataOutFlags);

        float shortest_length = Float.POSITIVE_INFINITY;
        float this_length;
        boolean found = false;
        float out_x = 0;
        float out_y = 0;
        float out_z = 0;

        int num_tris = numCoords / 3;
        int coord_offset = 0;

        for(int i = 0; i < num_tris; i++)
        {
            wkPolygon[0] = coordinates[indices[coord_offset] * 3];
            wkPolygon[1] = coordinates[indices[coord_offset] * 3 + 1];
            wkPolygon[2] = coordinates[indices[coord_offset] * 3 + 2];

            wkPolygon[3] = coordinates[indices[coord_offset + 1] * 3];
            wkPolygon[4] = coordinates[indices[coord_offset + 1] * 3 + 1];
            wkPolygon[5] = coordinates[indices[coord_offset + 1] * 3 + 2];

            wkPolygon[6] = coordinates[indices[coord_offset + 2] * 3];
            wkPolygon[7] = coordinates[indices[coord_offset + 2] * 3 + 1];
            wkPolygon[8] = coordinates[indices[coord_offset + 2] * 3 + 2];

            coord_offset += 3;

            if(ray3DTriangleChecked(origin, direction, 0, dataOut))
            {
                found = true;

                if(findAny)
                    break;

                float l_x = origin[0] - dataOut[0];
                float l_y = origin[1] - dataOut[1];
                float l_z = origin[2] - dataOut[2];

                this_length = l_x * l_x + l_y * l_y + l_z * l_z;

                if(this_length < shortest_length)
                {
                    shortest_length = this_length;
                    out_x = dataOut[0];
                    out_y = dataOut[1];
                    out_z = dataOut[2];
                }
            }
        }

        dataOut[0] = out_x;
        dataOut[1] = out_y;
        dataOut[2] = out_z;

        return found;
    }

    //---------------------------------------------------------------
    // Methods defined by Comparable
    //---------------------------------------------------------------

    /**
     * Compares this object with the specified object for order. Returns a
     * negative integer, zero, or a positive integer as this object is less
     * than, equal to, or greater than the specified object.
     *
     * @param o The objec to be compared
     * @return -1, 0 or 1 depending on order
     * @throws ClassCastException The specified object's type prevents it from
     *    being compared to this Object
     */
    public int compareTo(Object o)
        throws ClassCastException
    {
        IndexedTriangleArray geom = (IndexedTriangleArray)o;
        return compareTo(geom);
    }

    //---------------------------------------------------------------
    // Methods defined by Object
    //---------------------------------------------------------------

    /**
     * Compare this object for equality to the given object.
     *
     * @param o The object to be compared
     * @return True if these represent the same values
     */
    public boolean equals(Object o)
    {
        if(!(o instanceof IndexedTriangleArray))
            return false;
        else
            return equals((IndexedTriangleArray)o);
    }

    //----------------------------------------------------------
    // Local methods
    //----------------------------------------------------------

    /**
     * Compares this object with the specified object for order. Returns a
     * negative integer, zero, or a positive integer as this object is less
     * than, equal to, or greater than the specified object.
     *
     * @param ta The argument instance to be compared
     * @return -1, 0 or 1 depending on order
     */
    public int compareTo(IndexedTriangleArray ta)
    {
        if(ta == null)
            return 1;

        if(ta == this)
            return 0;

        return 0;
    }

    /**
     * Compares this object with the specified object to check for equivalence.
     *
     * @param ta The geometry instance to be compared
     * @return true if the objects represent identical values
     */
    public boolean equals(IndexedTriangleArray ta)
    {
        return (ta == this);
    }
}
