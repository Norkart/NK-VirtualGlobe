/*****************************************************************************
 *                     Yumetech, Inc Copyright (c) 2004 - 2006
 *                               Java Source
 *
 * This source is licensed under the GNU LGPL v2.1
 * Please read http://www.gnu.org/copyleft/lgpl.html for more information
 *
 * This software comes with the standard NO WARRANTY disclaimer for any
 * purpose. Use it at your own risk. If there's a problem you get to fix it.
 *
 ****************************************************************************/

package org.j3d.aviatrix3d.output.graphics;

// External imports
import javax.media.opengl.GL;
import javax.media.opengl.GLContext;
import javax.media.opengl.GLException;
import javax.media.opengl.Threading;

import javax.vecmath.Matrix4f;
import javax.vecmath.Point3f;


// Local imports
import org.j3d.aviatrix3d.rendering.*;

import org.j3d.util.DefaultErrorReporter;
import org.j3d.util.ErrorReporter;
import org.j3d.util.IntHashMap;

import org.j3d.aviatrix3d.pipeline.graphics.GraphicsDetails;
import org.j3d.aviatrix3d.pipeline.graphics.GraphicsEnvironmentData;
import org.j3d.aviatrix3d.pipeline.graphics.GraphicsListenerMulticaster;
import org.j3d.aviatrix3d.pipeline.graphics.GraphicsResizeListener;

/**
 * Common implementation for rendering handling to render for a single
 * output device - be it on-screen or off.
 * <p>
 *
 * This class implements everything except for the display() method
 * of GLEventListener.
 *
 * @author Alan Hudson
 * @version $Revision: 3.22 $
 */
abstract class BaseRenderingProcessor
    implements Renderer
{
    /** The initial size of the children list */
    protected static final int LIST_START_SIZE = 400;

    /** Initial depth for the number of transforms above a view,fog or bg */
    protected static final int INITIAL_PATH_DEPTH = 64;

    /** Initial size of the deletion queue array */
    protected static final int INITIAL_DELETE_SIZE = 20;

    /** The initial size of the shader init/log lists */
    protected static final int SHADERLIST_START_SIZE = 64;

    /** The invalid shader ID */
    protected static final Integer INVALID_SHADER = new Integer(-1);

    /** Message when the GL context failed to initialise */
    private static final String FAILED_CONTEXT_MSG =
        "The GL context failed to initialise for some mysterious reason";

    /** If there's a GLException during the render loop */
    private static final String GL_RENDER_ERROR =
        "An unexpected OpenGL error happened during rendering.";

    /** The current clear colour */
    protected float[] clearColor;

    /** Flag to say that colour needs to be reset this frame */
    protected boolean resetColor;

    /** Local storage of the nodes that need to be rendered */
    protected GraphicsDetails[] renderableList;

    /** Local storage of the nodes that need to be rendered */
    protected int[] operationList;

    /** Number of items in the renderable list */
    protected int numRenderables;

    /** Local storage of the environment data collections */
    protected GraphicsEnvironmentData[] environmentList;

    /** Queue for holding deleted textures */
    protected DeletableRenderable[] deleteQueue;

    /** The number of deletable objects to handle next frame */
    protected int numDeletions;

    /** The change requestors for data changed sets */
    protected ShaderSourceRenderable[] shaderInitList;

    /** The change requestors for bounds changed sets */
    protected ShaderSourceRenderable[] shaderLogList;

    /** The current place to add shader init requestors */
    protected int lastShaderInitIdx;

    /** The current place to add shader log requestors */
    protected int lastShaderLogIdx;

    /** The current program ID for GLSLang shaders.  */
    protected Integer currentShaderProgramId;

    /** Stack of the available OGL light IDs that could be assigned to lights */
    protected Integer[] availableLights;

    /** index in the availableLights list of the last available */
    protected int lastLightIdx;

    /** Mapping of the object ID to it's used light ID */
    protected IntHashMap lightIdMap;

    /** Stack of the available OGL clip IDs that could be assigned to clips */
    protected Integer[] availableClips;

    /** index in the availableClips list of the last available */
    protected int lastClipIdx;

    /** Mapping of the object ID to it's used clip ID */
    protected IntHashMap clipIdMap;

    /**
     * Flag to say if we the default clear colour should be used, or
     * if there is at least one background that we can make use of
     */
    protected boolean alwaysLocalClear;

    /** Combined view and projection matrix. This used to be set
     * in setEnvironmentData when we had a single one. Now there is
     * one per layer and we need to do something about it.
     */
    protected Matrix4f surfaceMatrix;

    /** The eye offset from the normal position */
    protected float[] eyePoint;

    /** Data describing the current viewport if explicit values used */
    protected float[] currentViewport;

    /**
     * Flag indicating if any initialisation has been performed yet. Sometimes
     * we can get into situations where the GL context is already valid, but
     * we don't get the NEW context status being reported. If we haven't
     * initialised ourselves at this point, then we really need to, to stop
     * crashing.
     */
    protected boolean initComplete;

    /** Request that the current drawing terminate immediately. App closing */
    protected boolean terminate;

    /** Listeners for resize events */
    private GraphicsResizeListener listeners;

    /** Error reporter used to send out messages */
    protected ErrorReporter errorReporter;

    /** The context from the drawable */
    protected GLContext glContext;

    /** Flag inidicating the context has not been destroyed yet */
    private boolean contextNotDestroyed;

    /** Single threaded rendering mode operation state. Defaults to false. */
    protected boolean singleThreaded;

    /**
     * The context is current right now. Unfortunately JOGL has no way of
     * asking that right now, so we have to keep a flag.
     */
    private boolean contextIsCurrent;

    /** Temporary used for fetching clear colours for multipass textures */
    private float[] colorTmp;

    /**
     * Construct handler for rendering objects to the main screen.
     *
     * @param context The context that this processor is working on
     */
    BaseRenderingProcessor(GLContext context)
    {
        glContext = context;

        colorTmp = new float[4];
        clearColor = new float[4];
        surfaceMatrix = new Matrix4f();
        eyePoint = new float[3];

        resetColor = false;
        initComplete = false;
        terminate = false;
        contextNotDestroyed = true;
        alwaysLocalClear = true;
        singleThreaded = false;
        contextIsCurrent = false;

        numRenderables = 0;

        lightIdMap = new IntHashMap();
        clipIdMap = new IntHashMap();

        lastLightIdx = 0;
        lastClipIdx = 0;
        lastShaderInitIdx = 0;
        lastShaderLogIdx = 0;
        currentShaderProgramId = INVALID_SHADER;

        deleteQueue = new DeletableRenderable[INITIAL_DELETE_SIZE];
        shaderInitList = new ShaderSourceRenderable[SHADERLIST_START_SIZE];
        shaderLogList = new ShaderSourceRenderable[SHADERLIST_START_SIZE];

        currentViewport = new float[4];

        errorReporter = DefaultErrorReporter.getDefaultReporter();
    }

    //---------------------------------------------------------------
    // Methods defined by Renderer
    //---------------------------------------------------------------

    /**
     * Register an error reporter with the engine so that any errors generated
     * by the node's internals can be reported in a nice, pretty fashion.
     * Setting a value of null will clear the currently set reporter. If one
     * is already set, the new value replaces the old.
     *
     * @param reporter The instance to use or null
     */
    public void setErrorReporter(ErrorReporter reporter)
    {
        if(reporter == null)
            errorReporter = DefaultErrorReporter.getDefaultReporter();
        else
            errorReporter = reporter;
    }

    /**
     * Force a halt of the current processing. Any processing in progress
     * should exit immediately. Used to abort the current scene processing due
     * to application shutdown.
     */
    public void halt()
    {
        terminate = true;
    }

    /**
     * An object has been detected as being deleted (no internal or
     * external references to it left) and it needs to be cleaned up. The
     * next oppourtunity this drawable and any sub-drawables get, this object
     * should have it's <code>cleanup()</code> method called and then the
     * reference to it should be discarded.
     *
     * @param obj The instance to be queued up as no longer being used
     */
    public void queueDeletedObject(DeletableRenderable obj)
    {
        if(deleteQueue.length == numDeletions)
        {
            int size = deleteQueue.length;
            DeletableRenderable[] tmp = new
                DeletableRenderable[size << 1];

            System.arraycopy(deleteQueue, 0, tmp, 0, size);
            deleteQueue = tmp;
        }

        deleteQueue[numDeletions++] = obj;
    }

    /**
     * Queue up a collection of shader objects for processing on the next
     * frame. These processing requests are for either initialisation or log
     * handling, not for rendering.
     *
     * @param initList The shaders needing initialisation
     * @param numInit The number of shaders needing initialisation
     * @param logList The shaders needing log fetching
     * @param numLog The number of shaders needing log fetching
     */
    public void queueShaderRequests(ShaderSourceRenderable[] initList,
                                    int numInit,
                                    ShaderSourceRenderable[] logList,
                                    int numLog)
    {
        if(numInit > shaderInitList.length)
            shaderInitList = new ShaderSourceRenderable[numInit];

        if(numLog > shaderLogList.length)
            shaderLogList = new ShaderSourceRenderable[numLog];

        System.arraycopy(initList, 0, shaderInitList, 0, numInit);
        System.arraycopy(logList, 0, shaderLogList, 0, numLog);

        lastShaderInitIdx = numInit;
        lastShaderLogIdx = numLog;
    }

    /**
     * Set the background colour that this surface should be cleared to before
     * the drawing step. Colours range from 0 to 1 in the normal manner.
     *
     * @param r The red component of the background clear colour
     * @param g The green component of the background clear colour
     * @param b The blue component of the background clear colour
     * @param a The alpha component of the background clear colour
     */
    public void setClearColor(float r, float g, float b, float a)
    {
        clearColor[0] = r;
        clearColor[1] = g;
        clearColor[2] = b;
        clearColor[3] = a;

        resetColor = true;
    }

    /**
     * Set whether we should always force a local colour clear before
     * beginning any drawing. If this is set to false, then we can assume that
     * there is at least one background floating around that we can use to
     * clear whatever was drawn in the previous frame, and so we can ignore the
     * glClear(GL.GL_COLOR_BUFFER_BIT) call. The default is set to true.
     *
     * @param state true if we should always locally clear first
     */
    public void setColorClearNeeded(boolean state)
    {
        alwaysLocalClear = state;
    }

    /**
     * Update the list of items to be rendered to the current list. Draw them
     * at the next oppourtunity.
     *
     * @param nodes The list of nodes in sorted order
     * @param renderOps Operation to perform on each node
     * @param numValid The number of valid items in the array
     * @param envData environment data to be rendered with this scene
     */
    public void setDrawableObjects(GraphicsDetails[] nodes,
                                   int[] renderOps,
                                   int numValid,
                                   GraphicsEnvironmentData[] envData)
    {
        renderableList = nodes;
        operationList = renderOps;

        numRenderables = numValid;
        environmentList = envData;
    }
    
    public class RenderAction implements Runnable {
        public boolean retval = true;
        public void run() {
            retval = render();
        }
    }
    
    public final RenderAction renderAction = new RenderAction();
    
    /**
     * Draw to the drawable now. This causes the drawable's context to be made
     * current and the GL commands are issued. Derived classes should not
     * override this method, instead they should use the display()
     * or init() methods as needed.
     *
     * @return false if the rendering should not continue
     */
    public final boolean render()
    {
        if(terminate)
        {
            terminateCleanup();
            return false;
        }
        
        if (Threading.isSingleThreaded() && !Threading.isOpenGLThread()) {
            Threading.invokeOnOpenGLThread(renderAction);
            return renderAction.retval;
        }

        try
        {
            if(!singleThreaded || !initComplete || !contextIsCurrent)
            {
                int status = glContext.makeCurrent();

                switch(status)
                {
                    case GLContext.CONTEXT_CURRENT:
                        if(!initComplete)
                            init();

                        contextIsCurrent = true;
                        break;

                    case GLContext.CONTEXT_CURRENT_NEW:
                        init();

                        contextIsCurrent = true;
                        break;

                    case GLContext.CONTEXT_NOT_CURRENT:
                        // Exit right now as there's nothing left to do.
                        errorReporter.errorReport(FAILED_CONTEXT_MSG, null);
                        contextIsCurrent = false;
                        return false;
                }
            }

            if(contextIsCurrent && !terminate)
                display();

            if(terminate)
                terminateCleanup();
        }
        catch(GLException ie)
        {
            // Ignore interrupted exceptions, but it probably means we've
            // be shutdown.
            if(ie.getCause() instanceof InterruptedException)
                terminate = true;
            else
                errorReporter.errorReport(GL_RENDER_ERROR, ie);
        }

        return !terminate;
    }


    /**
     * Cause the buffers of the underlying drawable to swap now.
     */
    public void swapBuffers()
    {
        if(!contextIsCurrent)
            return;

        glContext.getGLDrawable().swapBuffers();

        if(!singleThreaded)
        {
            contextIsCurrent = false;
            glContext.release();
        }
    }

    /**
     * Notification that this surface is being drawn to with a single thread.
     * This can be used to optmise internal state handling when needed in a
     * single versus multithreaded environment.
     * <p>
     *
     * This method should never be called by end user code. It is purely for
     * the purposes of the {@link org.j3d.aviatrix3d.rendering.RenderManager}
     * to inform the device about what state it can expect.
     *
     * @param state true if the device can expect single threaded behaviour
     */
    public void enableSingleThreaded(boolean state)
    {
        singleThreaded = state;
    }

    /**
     * If the output device is marked as single threaded, this instructs the
     * device that the current rendering thread has exited. Next time the draw
     * method is called, a new rendering context will need to be created for
     * a new incoming thread instance. Also, if any other per-thread resources
     * are around, clean those up now. This is called just before that thread
     * exits.
     */
    public void disposeSingleThreadResources()
    {
        if(singleThreaded && contextIsCurrent)
        {
            contextIsCurrent = false;
            glContext.release();
        }
    }

    /**
     * Get the surface to VWorld transformation matrix.
     * The coordinate system is in the window-system interface:
     * The x,y position is the lower left corner, with height going up the screen and width heading to the right.
     *
     * @param x The X coordinate on the surface
     * @param y The Y coordinate on the surface
     * @param matrix The matrix to copy into  It must be preallocated.
     * @param layer The layer ID to fetch from. Layer 0 is the front-most
     * @param subLayer The ID of the viewport-layer that is needed. If there
     *   are no sub-layers, use 0.
     *
     * @return Whether the coordinates where on the layer
     */
    public boolean getSurfaceToVWorld(int x,
                                   int y,
                                   int layer,
                                   int subLayer,
                                   Matrix4f matrix)
    {
        GraphicsEnvironmentData data = matchEnvData(x, y, layer, subLayer);

        if(data == null) {
            return false;
        }

        matrix.set(data.viewTransform);

        return true;
    }

    /**
     * Convert a pixel location to surface coordinates.
     * The coordinate system is in the window-system interface:
     * The x,y position is the lower left corner, with height going up the screen and width heading to the right.
     *
     * @param x The X coordinate
     * @param y The Y coordinate
     * @param layer The layer ID to fetch from. Layer 0 is the front-most
     * @param subLayer The ID of the viewport-layer that is needed. If there
     *   are no sub-layers, use 0.
     * @param position The converted position.  It must be preallocated.
     *
     * @return Whether the coordinates where on the layer
     */
    public boolean getPixelLocationInSurface(int x,
                                          int y,
                                          int layer,
                                          int subLayer,
                                          Point3f position)
    {
        GraphicsEnvironmentData data = matchEnvData(x, y, layer, subLayer);

        if(data == null)
        {
            return false;
        }

        if(data.viewProjectionType ==
           ViewEnvironmentCullable.PERSPECTIVE_PROJECTION)
        {
            float width = data.viewport[ViewEnvironmentCullable.VIEW_WIDTH];
            float height = data.viewport[ViewEnvironmentCullable.VIEW_HEIGHT];

            int local_x = data.viewport[ViewEnvironmentCullable.VIEW_X];
            int local_y = data.viewport[ViewEnvironmentCullable.VIEW_Y];

            x = x - local_x;
            y = y - local_y;

            position.x = (float)((data.viewFrustum[1] - data.viewFrustum[0]) *
                         (x / width - 0.5f));
            position.y = (float) ((data.viewFrustum[3] - data.viewFrustum[2]) *
                         (y / height - 0.5f));
            position.z = (float) -data.viewFrustum[4];
        }
        else if(data.viewProjectionType ==
                ViewEnvironmentCullable.ORTHOGRAPHIC_PROJECTION)
        {
            int local_x = data.viewport[ViewEnvironmentCullable.VIEW_X];
            int local_y = data.viewport[ViewEnvironmentCullable.VIEW_Y];
            float width = data.viewport[ViewEnvironmentCullable.VIEW_WIDTH];
            float height = data.viewport[ViewEnvironmentCullable.VIEW_HEIGHT];

            x = x - local_x;
            y = y - local_y;

            position.x = (float) data.viewFrustum[0] +
                         (float)((data.viewFrustum[1] - data.viewFrustum[0]) * (x / width));
            position.y = (float) data.viewFrustum[2] +
                          (float) ((data.viewFrustum[3] - data.viewFrustum[2])
                          * (y / height));
            position.z = (float) -data.viewFrustum[4];
        }

        return true;
    }

    /**
     * Get the Center Eye position in surface coordinates.
     *
     * @param x The X coordinate on the surface
     * @param y The Y coordinate on the surface
     * @param position The current eye position.  It must be preallocated.
     * @param layer The layer ID to fetch from. Layer 0 is the front-most
     *
     * @return Whether the coordinates where on the layer
     */
    public boolean getCenterEyeInSurface(int x,
                                      int y,
                                      int layer,
                                      int subLayer,
                                      Point3f position)
    {
        GraphicsEnvironmentData data = matchEnvData(x, y, layer, subLayer);

        if(data == null)
            return false;

        if(data.viewProjectionType ==
           ViewEnvironmentCullable.PERSPECTIVE_PROJECTION)
        {
            position.set(data.eyeOffset);
        }
        else if(data.viewProjectionType ==
                ViewEnvironmentCullable.ORTHOGRAPHIC_PROJECTION)
        {
            // Ignore eye offset for ortho projection

            int local_x = data.viewport[ViewEnvironmentCullable.VIEW_X];
            int local_y = data.viewport[ViewEnvironmentCullable.VIEW_Y];
            float width = data.viewport[ViewEnvironmentCullable.VIEW_WIDTH];
            float height = data.viewport[ViewEnvironmentCullable.VIEW_HEIGHT];

            x = x - local_x;
            y = y - local_y;

            position.x = (float) data.viewFrustum[0] +
                         (float)((data.viewFrustum[1] - data.viewFrustum[0]) *
                         (x / width));
            position.y = (float) data.viewFrustum[2] + (float)
                         ((data.viewFrustum[3] - data.viewFrustum[2]) *
                         (y / height));
            position.z = 0;
        }

        return true;
    }


    //---------------------------------------------------------------
    // Local Methods
    //---------------------------------------------------------------

    /**
     * Called for each rendering loop. The derived class should now
     * perform the rendering that they need to do for the given type of
     * renderer. The context is made current before this call and is
     * made non current after this call. Derived code does not need to
     * worry about context state handling.
     */
    protected abstract void display();

    /**
     * Called by the drawable immediately after the OpenGL context is
     * initialized or has changed; the GLContext has already been made
     * current when this method is called.
     */
    protected void init()
    {
        GL gl = glContext.getGL();

        gl.glClearColor(clearColor[0],
                        clearColor[1],
                        clearColor[2],
                        clearColor[3]);

        gl.glEnable(GL.GL_DEPTH_TEST);
        gl.glEnable(GL.GL_NORMALIZE);
        gl.glEnable(GL.GL_SCISSOR_TEST);

        gl.glEnable(GL.GL_CULL_FACE);
        gl.glCullFace(GL.GL_BACK);

        gl.glBlendFunc(GL.GL_SRC_ALPHA, GL.GL_ONE_MINUS_SRC_ALPHA);
        gl.glHint(GL.GL_PERSPECTIVE_CORRECTION_HINT, GL.GL_NICEST);
        gl.glHint(GL.GL_FOG_HINT, GL.GL_NICEST);

        // Find out the number of available lights and clip planes and
        // initialise the arrays to that length.
        int[] num_id = new int[1];

        gl.glGetIntegerv(GL.GL_MAX_CLIP_PLANES, num_id, 0);

        availableClips = new Integer[num_id[0]];
        for(int i = 0; i < num_id[0]; i++)
            availableClips[i] = new Integer(GL.GL_CLIP_PLANE0 + i);

        gl.glGetIntegerv(GL.GL_MAX_LIGHTS, num_id, 0);

        // GL_LIGHT0 is assumed to be used by the current viewpoint
        availableLights = new Integer[num_id[0]];

        for(int i = 0; i < num_id[0]; i++)
            availableLights[i] = new Integer(GL.GL_LIGHT1 + i);

        initComplete = true;
    }

    /**
     * If termination has been requested during the last call to
     * the display loop, this method is called to destroy and cleanup
     * the context instance. Once called, this instance can no longer be
     * used.
     */
    protected void terminateCleanup()
    {
        if(contextNotDestroyed)
        {
            contextNotDestroyed = false;
            contextIsCurrent = false;
            glContext.release();
            glContext.destroy();
        }
    }

    /**
     * Setup the viewport environment to be drawn, but do not yet set up the
     * viewpoint and other per-layer-specific effects. If a viewport has
     * multiple layers, then each layer could potentially have a different
     * viewpoint etc.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void setupViewport(GL gl, GraphicsEnvironmentData data)
    {
        gl.glViewport(data.viewport[GraphicsEnvironmentData.VIEW_X],
                      data.viewport[GraphicsEnvironmentData.VIEW_Y],
                      data.viewport[GraphicsEnvironmentData.VIEW_WIDTH],
                      data.viewport[GraphicsEnvironmentData.VIEW_HEIGHT]);
        gl.glScissor(data.viewport[GraphicsEnvironmentData.VIEW_X],
                     data.viewport[GraphicsEnvironmentData.VIEW_Y],
                     data.viewport[GraphicsEnvironmentData.VIEW_WIDTH],
                     data.viewport[GraphicsEnvironmentData.VIEW_HEIGHT]);
    }

    /**
     * Setup the viewport environment to be drawn for a multipass rendering.
     * The difference between this and the normal viewport setup is that this
     * always assumes starting at 0,0 and just uses the width and height to
     * setup the bounds. It is assuming rendering to one of the auxillary
     * buffers rather than the main back buffer.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void setupMultipassViewport(GL gl, GraphicsEnvironmentData data)
    {
        gl.glViewport(0,
                      0,
                      data.viewport[GraphicsEnvironmentData.VIEW_WIDTH],
                      data.viewport[GraphicsEnvironmentData.VIEW_HEIGHT]);
        gl.glScissor(0,
                     0,
                     data.viewport[GraphicsEnvironmentData.VIEW_WIDTH],
                     data.viewport[GraphicsEnvironmentData.VIEW_HEIGHT]);
    }

    /**
     * Setup the view environment for a specific layer for drawing now. This
     * calls the render effects processor, draws the background, initiates the
     * viewpoint, frustum etc.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void preLayerEnvironmentDraw(GL gl, GraphicsEnvironmentData data)
    {
        if(data.effectsProcessor != null)
            data.effectsProcessor.preDraw(gl, data.userData);

        if(data.background != null)
        {
            // If it is colour only, then don't bother with rest of the
            // the projection setup. It will be wasted.
            if(((BackgroundRenderable)data.background).is2D())
            {
                data.background.render(gl);
                data.background.postRender(gl);
            }
            else
            {
                gl.glMatrixMode(GL.GL_PROJECTION);
                gl.glPushMatrix();
                gl.glLoadIdentity();

                gl.glFrustum(data.backgroundFrustum[0],
                             data.backgroundFrustum[1],
                             data.backgroundFrustum[2],
                             data.backgroundFrustum[3],
                             data.backgroundFrustum[4],
                             data.backgroundFrustum[5]);

                gl.glClear(GL.GL_DEPTH_BUFFER_BIT);

                gl.glMatrixMode(GL.GL_MODELVIEW);
                gl.glPushMatrix();

                gl.glLoadMatrixf(data.backgroundTransform, 0);

                gl.glDepthMask(false);
                gl.glDisable(GL.GL_BLEND);
                gl.glDisable(GL.GL_DEPTH_TEST);

                data.background.render(gl);
                data.background.postRender(gl);

                gl.glDepthMask(true);
                gl.glEnable(GL.GL_DEPTH_TEST);
                gl.glEnable(GL.GL_BLEND);
                gl.glPopMatrix();

                gl.glMatrixMode(GL.GL_PROJECTION);
                gl.glPopMatrix();
                gl.glMatrixMode(GL.GL_MODELVIEW);
            }
        }

        renderViewpoint(gl, data);

        if(data.fog != null)
        {
            gl.glEnable(GL.GL_FOG);
            data.fog.render(gl);
        }
    }

    /**
     * Complete the view environment setup at the end of the layer. This
     * disables any fog, the current viewpoint and the post draw action on the
     * render effects processor.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void postLayerEnvironmentDraw(GL gl,
                                            GraphicsEnvironmentData data)
    {
        if(data.fog != null)
        {
            data.fog.postRender(gl);
            gl.glDisable(GL.GL_FOG);
        }

        if(terminate)
            return;

        if(data.effectsProcessor != null)
            data.effectsProcessor.postDraw(gl, data.userData);

        if(terminate)
            return;

        if(data.viewpoint != null)
            data.viewpoint.postRender(gl);
    }

    /**
     * Setup the view environment for a specific pass of a multipass rendering
     * for drawing now. This calls the multipass observer, and initiates the
     * viewpoint, frustum etc. Backgrounds are not drawn.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void preMPPassEnvironmentDraw(GL gl,
                                            GraphicsEnvironmentData data)
    {
//        if(data.effectsProcessor != null)
//            data.effectsProcessor.preDraw(gl, data.userData);

        renderViewpoint(gl, data);

        if(data.fog != null)
        {
            gl.glEnable(GL.GL_FOG);
            data.fog.render(gl);
        }
    }

    /**
     * Complete the view environment setup at the end of the layer. This
     * disables any fog, the current viewpoint and the post draw action on the
     * render effects processor.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void postMPPassEnvironmentDraw(GL gl,
                                             GraphicsEnvironmentData data)
    {
        if(data.fog != null)
        {
            data.fog.postRender(gl);
            gl.glDisable(GL.GL_FOG);
        }

        if(terminate)
            return;

//        if(data.effectsProcessor != null)
//            data.effectsProcessor.postDraw(gl, data.userData);

        if(terminate)
            return;

        if(data.viewpoint != null)
            data.viewpoint.postRender(gl);
    }

    /**
     * Render the viewpoint setup.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void renderViewpoint(GL gl, GraphicsEnvironmentData data)
    {
        // Will want to check here for the VP being non-live.
        if(data.viewpoint == null)
            return;

        updateProjectionMatrix(gl, data);

        gl.glLoadIdentity();

        data.viewpoint.render(gl);
        gl.glMultMatrixf(data.cameraTransform, 0);
    }

    /**
     * Update the projection matrix.
     *
     * @param gl The gl context to draw with
     * @param data The view environment information to setup
     */
    protected void updateProjectionMatrix(GL gl, GraphicsEnvironmentData data)
    {
        gl.glMatrixMode(GL.GL_PROJECTION);
        gl.glLoadIdentity();

        switch(data.viewProjectionType)
        {
            case ViewEnvironmentCullable.PERSPECTIVE_PROJECTION:
                 gl.glFrustum(data.viewFrustum[0],
                              data.viewFrustum[1],
                              data.viewFrustum[2],
                              data.viewFrustum[3],
                              data.viewFrustum[4],
                              data.viewFrustum[5]);
                break;

            case ViewEnvironmentCullable.ORTHOGRAPHIC_PROJECTION:
                 gl.glOrtho(data.viewFrustum[0],
                              data.viewFrustum[1],
                              data.viewFrustum[2],
                              data.viewFrustum[3],
                              data.viewFrustum[4],
                              data.viewFrustum[5]);
                break;

            default:
                System.out.println("unknown projection type");
        }

        gl.glMatrixMode(GL.GL_MODELVIEW);
    }

    /**
     * Internal convenience method that takes a layer ID, sublayer Id and the
     * x,y surface coordinates and locates the GraphicsEnvironmentData instance
     * that corresponds to it. If there is none, then null is returned.
     *
     * @param x The X coordinate on the whole surface
     * @param y The Y coordinate on the whole surface
     * @param layer The layer ID to fetch from. Layer 0 is the front-most
     * @param subLayer The ID of the viewport-layer that is needed. Typically 0
     */
    private GraphicsEnvironmentData matchEnvData(int x,
                                                 int y,
                                                 int layer,
                                                 int subLayer)
    {
        // Local copy to allow for proper dealing with asynchronous
        // interactions. This could be called by user code and mid call the
        // pipeline decides to send another set of updates. This ensures that
        // the boat doesn't change mid-check on us.
        if((environmentList == null) || (environmentList.length == 0))
            return null;

        GraphicsEnvironmentData[] data = environmentList;
        GraphicsEnvironmentData ret_val = null;

        for(int i = 0; i < data.length; i++)
        {
            if(data[i] != null &&
               data[i].layerId == layer && data[i].subLayerId == subLayer &&
               x >= data[i].viewport[0] && y >= data[i].viewport[1] &&
               (x < data[i].viewport[0] + data[i].viewport[2]) &&
               (y < data[i].viewport[1] + data[i].viewport[3]))
            {
                ret_val = data[i];
                break;
            }
        }

        return ret_val;
    }
}
